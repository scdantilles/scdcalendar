<?php

function scdcalendar_help($path, $arg) {
  switch ($path) {
    case "admin/help#scdcalendar":
      return '<p>' . t("Google Calendar Integration for the SCD website. You need to set your google calendar credentials in the settings interface, and fill the special fields in each content of the Library type.") . '</p>';
      break;
  }
}

function scdcalendar_access_check($nid) {
  $node = node_load($nid);
  return $node->type == 'library';
}

function scdcalendar_menu() {

  /* Show the events today for a given pole */
  $items[] = array(
    'path' => 'todaypole/%',
    'title' => 'Aujourd\'hui',
    'page callback' => 'scdcalendar_todaypole',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  /* Show the events this week for a given pole */
  $items[] = array(
    'path' => 'thisweekpole',
    'title' => 'Cette semaine',
    'page callback' => 'scdcalendar_thisweekpole',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => TRUE,
  );

  /* Show the events this year for a library */
  $items['node/%/thisyearlib'] = array(
    'title' => 'Cette année',
    'page callback' => 'scdcalendar_thisyearlib',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => 'scdcalendar_access_check',
  );

  return $items;
}

/* This function outputs two HTML blocks, one is visible on mobile and one on desktop. */
function scdcalendar_todaypole($scdcalendar_todaypole) {
  drupal_set_title("");

  $pole = $scdcalendar_todaypole;

//print_r($scdcalendar_todaypole);

/*
// Sort of hardcoded. Get the pole ID for a domain name.
  if ($_SERVER['SERVER_NAME'] == 'bumartinique.univ-antilles.fr')
    $pole = 11;
  elseif ($_SERVER['SERVER_NAME'] == 'buguadeloupe.univ-antilles.fr')
    $pole = 10;
  else
    return "";
*/

  $dt = new DateTime();
  $now = $dt->getTimestamp();

  $query = new EntityFieldQuery();

  // query all the libraries
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'library')
    ->fieldCondition('field_pole', 'tid', $pole)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldOrderBy('field_weight', 'value', 'ASC');

  $result = $query->execute();

  $nodes = array();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
  }

  /* DESKTOP VERSION */
  $out = '<table id="todaypole" class="table hidden-xs">';
  // Loop over libraries
  foreach ($nodes as $node) {
    if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
     or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
      continue;

    // Get the google cal credentials and calendar id
    $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
    $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

    $client = gauth_client_get($accountname, TRUE);

    $service = new Google_Service_Calendar($client);

    // Set the time interval
    $timeMin = new DateTime();
    $timeMin->setTime( 0,  0);
    $timeMax = new DateTime();
    $timeMax->setTime(23, 59);

    // Invoke the web service to get the events
    $events = $service->events->listEvents($calid, array(
      'singleEvents' => 'true',
      'timeMin' => $timeMin->format(DateTime::RFC3339),
      'timeMax' => $timeMax->format(DateTime::RFC3339),
      'orderBy' => 'startTime',       
    ));

    $out .= "<tr><td>" . $node->title . "</td>";

    // Loop over events
    $out .= "<td>";
    foreach ($events->getItems() as $event) {
      $start = strtotime($event->getStart()->dateTime);
      $end = strtotime($event->getEnd()->dateTime);
      $out .= "<div>De " . date('G\:i', $start) . " à " . date('G\:i', $end) . "</div>";
    }
    if (!count($events->getItems()))
    {
      $out .= "Fermé aujourd'hui";
    }
    $out .= "</td>";
    $out .= '<td><span class="next-days" href="#thisweeklib-'.$node->nid.'" data-toggle="collapse">Prochains jours <b class="caret"></b></span></td>';
    //$out .= '<td><a class="btn btn-primary btn-sm" href="venir/'.$node->nid.'">Venir</a></td>'; https://trello.com/c/DYJK4Q1w/94-unifier-boutons-venir-et-sur-home-sites-buguadeloupe-burecherche
    //$out .= '<td><a class="btn btn-primary btn-sm" href="node/'.$node->nid.'">Plus d\'infos</a></td>';
    $out .= '<td>' . l("Plus d'infos", 'node/' . $node->nid, array('attributes' => array('class' => array('btn', 'btn-primary','btn-sm')))) . '</td>';
    $out .= "</tr>";
    $out .= '<tr id="thisweeklib-'.$node->nid.'" class="collapse thisweeklib"><td colspan="5">'.scdcalendar_thisweeklib($node->nid).'</td></tr>';
  }
  $out .= "</table>";

  /* MOBILE VERSION */
  $out .= '<div id="todaypole" class="visible-xs">';
  $out .= '<div class="shadow-container">';
  $out .= '<ul class="nav nav-tabs" role="tablist">';
  // Build nav tabs
  $i = 0;
  foreach ($nodes as $node) {
    if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
     or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
      continue;
    $shortname = $node->field_nom_court[LANGUAGE_NONE][0]['value'];
    $active = $i == 0 ? 'active' : '';
    $out .= '<li role="presentation" class="'. $active .'"><a href="#lib' . $node->nid . '" aria-controls="lib' . $node->nid . '" role="tab" data-toggle="tab">' . $shortname . '</a></li>';
    $i++;
  }
  $out .= "</ul>";
  $out .= '<div class="tab-content">';
  // Loop over libraries
  $i = 0;
  foreach ($nodes as $node) {
    if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
     or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
      continue;

    // Get the google cal credentials and calendar id
    $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
    $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

    $client = gauth_client_get($accountname, TRUE);

    $service = new Google_Service_Calendar($client);

    // Set the time interval
    $timeMin = new DateTime();
    $timeMin->setTime( 0,  0);
    $timeMax = new DateTime();
    $timeMax->setTime(23, 59);

    // Invoke the web service to get the events
    $events = $service->events->listEvents($calid, array(
      'singleEvents' => 'true',
      'timeMin' => $timeMin->format(DateTime::RFC3339),
      'timeMax' => $timeMax->format(DateTime::RFC3339),
      'orderBy' => 'startTime',      
    ));

    $active = $i == 0 ? 'active' : '';

    $out .= '<div role="tabpanel" class="tab-pane ' . $active . '" id="lib' . $node->nid . '">';
    $out .= '<table class="table table-bordered">';
    $out .= '<tr>';

    // Loop over events
    $out .= "<td colspan=\"2\">";
    foreach ($events->getItems() as $event) {
      $start = strtotime($event->getStart()->dateTime);
      $end = strtotime($event->getEnd()->dateTime);
      $out .= "<div>De " . date('G\:i', $start) . " à " . date('G\:i', $end) . "</div>";
    }
    if (!count($events->getItems()))
    {
      $out .= "Fermé aujourd'hui";
    }
    $out .= '</td>';
    $out .= '</tr>';
    $out .= '<tr>';
    $out .= '<td class="col-xs-6"><a href="#thisweeklib-xs-'.$node->nid.'" data-toggle="collapse">Prochains jours</a></td>';
    $out .= '<td class="col-xs-6">' . l("Plus d'infos", 'node/' . $node->nid) . '</td>';
    $out .= "</tr>";
    $out .= '<tr id="thisweeklib-xs-'.$node->nid.'" class="collapse thisweeklib"><td colspan="2">'.scdcalendar_thisweeklib($node->nid).'</td></tr>';
    $out .= "</table>";
    $out .= "</div>";
    $i++;
  }
  $out .= "</div>";
  $out .= "</div>";
  $out .= "</div>";

  return $out;
}

function scdcalendar_thisweekpole($pole) {
  $out = "<h2>Horaires d'ouverture</h2>";

  $query = new EntityFieldQuery();

  /* Query libraries */
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'library')
    ->fieldCondition('field_pole', 'tid', $pole)
    ->propertyCondition('status', NODE_PUBLISHED);

  $result = $query->execute();

  $nodes = array();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
  }

  // Loop over libraries and invoke build_week_calendar for each
  foreach ($nodes as $node) {
    $out .= "<h3>" . $node->title . "</h3>";
    $out .= build_week_calendar($node);
  }

  return $out;
}

/* This function builds a month calendar. It is used in a larger page that display events over 12 months */
function build_month_calendar($month, $year, $days) {
  $first_day = mktime(0, 0, 0, $month, 1, $year);
  $title = ucfirst(strftime("%B", $first_day));
  $day_of_week = date('D', $first_day);
  $days_in_month = date('t', mktime(0, 0, 0, $month+1, 0, $year));

  switch ($day_of_week) {
    case "Mon": $blank = 0;
      break;
    case "Tue": $blank = 1;
      break;
    case "Wed": $blank = 2;
      break;
    case "Thu": $blank = 3;
      break;
    case "Fri": $blank = 4;
      break;
    case "Sat": $blank = 5;
      break;
    case "Sun": $blank = 6;
      break;
  }

  $calendar = '<table class="scdcalendar table">';

  $calendar .= '<caption>' . $title . '</caption>';

  $calendar .= '<tr>';
  $calendar .= '<th>L</th>';
  $calendar .= '<th>M</th>';
  $calendar .= '<th>M</th>';
  $calendar .= '<th>J</th>';
  $calendar .= '<th>V</th>';
  $calendar .= '<th>S</th>';
  $calendar .= '<th>D</th>';
  $calendar .= '</tr>';

  $day_count = 1;

  while ($blank > 0) {
    $calendar .= '<td></td>';
    $blank = $blank - 1;
    $day_count++;
  }

  $day_num = 1;
  $month = str_pad($month, 2, "0", STR_PAD_LEFT);

  while ($day_num <= $days_in_month) {
    $day_rel = str_pad($day_num, 2, "0", STR_PAD_LEFT);
    $date = "$year-$month-$day_rel";
    $busy = "";
    if (in_array($date, $days))
      $busy = "busy";

    $calendar .= '<td class="day '.$busy.'">' . $day_num . '</td>';
    $day_num++;
    $day_count++;

    if ($day_count > 7) {
      $calendar .= '</tr><tr>';
      $day_count = 1;
    }
  }

  while ($day_count > 1 && $day_count <= 7) {
    $calendar .= '<td> </td>';
    $day_count++;
  }

  $calendar .= '</tr>';

  $calendar .= '</table>';

  return $calendar;
}

/* Show the events of the week for a library */
function build_week_calendar($node) {
  if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
   or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
    return false;

  $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
  $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

  $client = gauth_client_get($accountname, TRUE);

  $service = new Google_Service_Calendar($client);

  // Set time interval
  $timeMin = new DateTime();
  $timeMax = new DateTime();
  $timeMax->modify('+1 week');

  // Query events
  $events = $service->events->listEvents($calid, array(
    'singleEvents' => 'true',
    'timeMin' => $timeMin->format(DateTime::RFC3339),
    'timeMax' => $timeMax->format(DateTime::RFC3339),
    'orderBy' => 'startTime',
  ));

  $oldLocale = setlocale(LC_TIME, '0');
  setlocale(LC_TIME, 'fr_FR.UTF8', 'fr.UTF8', 'fr_FR.UTF-8', 'fr.UTF-8');

  $dt = new DateTime();
  $now = $dt->getTimestamp();

  $out = "";

  // Loop over events
  $days = array();
  foreach ($events->getItems() as $event) {
    $start = strtotime($event->getStart()->dateTime);
    $end = strtotime($event->getEnd()->dateTime);
    $days[strftime("%Y-%m-%d", $start)][] = array(
      'dateTime' => $event->getStart()->dateTime,
      'start'    => date('G\:i', $start),
      'end'      => date('G\:i', $end)
    );
  }

  $out .= "<div class=\"row\">";
  // Loop over days
  ksort($days);
  foreach ($days as $day => $fields) {
    $out .= "<div class=\"col-sm-6\"><div class=\"day\">" . ucfirst(strftime("%A %e", strtotime($day))) . ", ";
    $i = 0;
    foreach ($fields as $field) {
      $out .= $i ? " et de " : "de ";
      $out .= $field['start'] . " à " . $field['end'];
      $i++;
    }
    $out .= "</div></div>";
  }

  if (!count($days))
  {
    $out .= "<div class=\"col-xs-12\"><p>Fermé cette semaine.</p></div>";
  }

  $out .= "</div>";

  setlocale(LC_TIME, $oldLocale);

  return $out;
}

function scdcalendar_thisweeklib($nid) {
  return build_week_calendar(node_load($nid));
}

/* Blocks */
function scdcalendar_block_info() {
  $blocks['thisweeklib'] = array(
    'info' => t('Horaires de la bibliothèque cette semaine.'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['thisyearlib'] = array(
    'info' => t('Horaires de la bibliothèque cette année.'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

function scdcalendar_block_view($delta = '') {
  switch($delta) {
    case 'thisweeklib':
      $block['content'] = build_week_calendar(node_load(arg(1)));
      break;
    case 'thisyearlib':
      $block['content'] = scdcalendar_thisyearlib(arg(1));
      break;
  }

  return $block;
}

/* Events of the year. Call build_month_calendar 12 times. Will be displayed in a Bootstrap modal. */
function scdcalendar_thisyearlib($nid) {
  $node = node_load($nid);

  $oldLocale = setlocale(LC_TIME, '0');
  setlocale(LC_TIME, 'fr_FR.UTF8', 'fr.UTF8', 'fr_FR.UTF-8', 'fr.UTF-8');

  if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
   or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
    return false;

  $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
  $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

  $client = gauth_client_get($accountname, TRUE);

  $service = new Google_Service_Calendar($client);

  $timeMin = new DateTime();
  $timeMin->modify('-1 month');
  $timeMax = new DateTime();
  $timeMax->modify('+12 month');

  $events = $service->events->listEvents($calid, array(
    'singleEvents' => 'true',
    'timeMin' => $timeMin->format(DateTime::RFC3339),
    'timeMax' => $timeMax->format(DateTime::RFC3339),
    'orderBy' => 'startTime',
  ));

  $days = array();

  foreach ($events->getItems() as $event) {
    $days[] = date('Y-m-d', strtotime($event->getStart()->dateTime));
  }

  $startmonth = date('m');
  $startyear  = date('Y');
  $out = "<a data-toggle=\"modal\" data-target=\".bs-example-modal-lg\">Les dates d'ouverture de l'année</a>";
  $out .= "<div class=\"modal fade bs-example-modal-lg\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\">";
  $out .= "<div class=\"modal-dialog modal-lg\">";
  $out .= "<div class=\"modal-content\">";
  $out .= "<div class=\"modal-header\">";
  $out .= "<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">×</span></button>";
  $out .= "<h4 class=\"modal-title\" id=\"myLargeModalLabel\">Les dates d'ouverture de l'année</h4>";
  $out .= "</div>";
  $out .= "<div class=\"modal-body\">";
  $out .= "<div class=\"row\">";
  for ($i = $startmonth; $i <= $startmonth+11; $i++)
  {
    $month = $i % 12;
    if ($month == 0) { $month = 12; }
    $year = $startyear + floor(($i-1) / 12);
    $out .= "<div class=\"scdcalcol col-md-3 col-sm-6 col-xs-12\">" . build_month_calendar($month, $year, $days) . "</div>";
  }
  $out .= "</div>";
  $out .= "</div>";
  $out .= "</div>";
  $out .= "</div>";
  $out .= "</div>";

  setlocale(LC_TIME, $oldLocale);

  return $out;
}

?>
