<?php

function scdcalendar_help($path, $arg) {
  switch ($path) {
    case "admin/help#scdcalendar":
      return '<p>' . t("Help text") . '</p>';
      break;
  }
} 

function scdcalendar_menu() {

  $items[] = array(
    'path' => 'todaypole/%',
    'title' => 'Aujourd\'hui',
    'page callback' => 'scdcalendar_todaypole',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => TRUE,
  );

  $items[] = array(
    'path' => 'thisweekpole',
    'title' => 'Cette semaine',
    'page callback' => 'scdcalendar_thisweekpole',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['node/%/thisweeklib'] = array(
    'title' => 'Cette semaine',
    'page callback' => 'scdcalendar_thisweeklib',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['node/%/thisyearlib'] = array(
    'title' => 'Cette année',
    'page callback' => 'scdcalendar_thisyearlib',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

function scdcalendar_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'library' && $view_mode == 'full') {

    if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
     or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
      return false;

    $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
    $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

    $client = gauth_client_get($accountname, TRUE);

    $service = new Google_Service_Calendar($client);

    $timeMin = new DateTime();
    $timeMin->setTime( 0,  0);
    $timeMax = new DateTime();
    $timeMax->setTime(23, 59);

    $events = $service->events->listEvents($calid, array(
      'singleEvents' => 'true',
      'timeMin' => $timeMin->format(DateTime::RFC3339),
      'timeMax' => $timeMax->format(DateTime::RFC3339),
    ));

    $out = "";

    // Loop over events
    foreach ($events->getItems() as $event) {
      $start = strtotime($event->getStart()->dateTime);
      $end = strtotime($event->getEnd()->dateTime);
      $out .= "Ouvert, de " . date('G\:i', $start) . " à " . date('G\:i', $end) . "<br/>";
    }
    if (!count($events->getItems()))
    {
      $out .= "Fermé";
    }

    $node->content ['opentoday_field'] = array(
      '#markup' => '<div class="field field-name-field-opentoday field-type-text field-label-above"><div class="field-label">Aujourd\'hui :&nbsp;</div><div class="field-items"><div class="field-item even">'.$out.'</div></div></div>',
      '#weight' => 10,
    );
  }
}

function scdcalendar_todaypole($pole) {
  drupal_set_title("");

  $dt = new DateTime();
  $now = $dt->getTimestamp();

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'library')
    ->fieldCondition('field_pole', 'tid', $pole)
    ->propertyCondition('status', NODE_PUBLISHED);

  $result = $query->execute();

  $nodes = array();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
  }

  $out = '<table id="todaypole" class="table table-bordered table-hover">';
  // Loop over libraries
  foreach ($nodes as $node) {
    if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
     or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
      continue;

    $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
    $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

    $client = gauth_client_get($accountname, TRUE);

    $service = new Google_Service_Calendar($client);

    $timeMin = new DateTime();
    $timeMin->setTime( 0,  0);
    $timeMax = new DateTime();
    $timeMax->setTime(23, 59);

    $events = $service->events->listEvents($calid, array(
      'singleEvents' => 'true',
      'timeMin' => $timeMin->format(DateTime::RFC3339),
      'timeMax' => $timeMax->format(DateTime::RFC3339),
    ));

    $out .= "<tr><td>" . $node->title . "</td>";

    // Loop over events
    foreach ($events->getItems() as $event) {
      $start = strtotime($event->getStart()->dateTime);
      $end = strtotime($event->getEnd()->dateTime);
      $out .= "<td>De " . date('G\:i', $start) . " à " . date('G\:i', $end) . "</td>";
    }
    if (!count($events->getItems()))
    {
      $out .= "<td>Fermé aujourd'hui</td>";
    }
    $out .= "<td>Prochains jours</td>";
    $out .= "<td>Venir</td>";
    $out .= "<td>...</td>";
    $out .= "</tr>";
  }
  $out .= "</table>";

  return $out;
}

function scdcalendar_thisweekpole($pole) {
  $out = "<h2>Horaires d'ouverture</h2>";

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'library')
    ->fieldCondition('field_pole', 'tid', $pole)
    ->propertyCondition('status', NODE_PUBLISHED);

  $result = $query->execute();

  $nodes = array();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = entity_load('node', $nids);
  }

  // Loop over libraries
  foreach ($nodes as $node) {
    $out .= "<h3>" . $node->title . "</h3>";
    $out .= build_week_calendar($node);
  }

  return $out;
}

function build_year_calendar($month, $year, $days) {
  $daysOfWeek = array('D','L','M','M','J','V','S');
  $firstDayOfMonth = mktime(0, 0, 0, $month, 1, $year);
  $numberDays = date('t', $firstDayOfMonth);

  $dateComponents = getdate($firstDayOfMonth);
  $monthName = ucfirst(strftime("%B", $firstDayOfMonth));
  $dayOfWeek = $dateComponents['wday'];

  $calendar = "<table class=\"scdcalendar table\">";
  $calendar .= "<caption>$monthName</caption>";
  $calendar .= "<tr>";

  foreach($daysOfWeek as $day) {
    $calendar .= "<th class='header'>$day</th>";
  } 

  $currentDay = 1;

  $calendar .= "</tr><tr>";

  if ($dayOfWeek > 0) { 
    $calendar .= "<td colspan='$dayOfWeek'>&nbsp;</td>";
  }
  
  $month = str_pad($month, 2, "0", STR_PAD_LEFT);

  while ($currentDay <= $numberDays) {
    if ($dayOfWeek == 7) {
      $dayOfWeek = 0;
      $calendar .= "</tr><tr>";
    }
    
    $currentDayRel = str_pad($currentDay, 2, "0", STR_PAD_LEFT);
    $date = "$year-$month-$currentDayRel";
    $busy = "";
    if (in_array($date, $days))
      $busy = "busy";
    $calendar .= "<td class='day $busy' rel='$date'>$currentDay</td>";

    $currentDay++;
    $dayOfWeek++;
  }

  if ($dayOfWeek != 7) {
    $remainingDays = 7 - $dayOfWeek;
    $calendar .= "<td colspan='$remainingDays'>&nbsp;</td>";
  }
  
  $calendar .= "</tr>";
  $calendar .= "</table>";

  return $calendar;
}

function build_week_calendar($node) {
  if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
   or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
    return false;

  $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
  $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

  $client = gauth_client_get($accountname, TRUE);

  $service = new Google_Service_Calendar($client);

  $timeMin = new DateTime();
  $timeMin->modify('-1 week');
  $timeMax = new DateTime();
  $timeMax->modify('+1 week');

  $events = $service->events->listEvents($calid, array(
    'singleEvents' => 'true',
    'timeMin' => $timeMin->format(DateTime::RFC3339),
    'timeMax' => $timeMax->format(DateTime::RFC3339),
  ));

  $oldLocale = setlocale(LC_TIME, '0');
  setlocale(LC_TIME, 'fr_FR.UTF8', 'fr.UTF8', 'fr_FR.UTF-8', 'fr.UTF-8');

  $dt = new DateTime();
  $now = $dt->getTimestamp();

  $out = "";

  // Loop over events
  $days = array();
  foreach ($events->getItems() as $event) {
    $start = strtotime($event->getStart()->dateTime);
    $end = strtotime($event->getEnd()->dateTime);
    if (date('W', $start) == date('W', $now)) {
      $days[strftime("%Y-%m-%d", $start)][] = array(
        'dateTime' => $event->getStart()->dateTime,
        'start'    => date('G\:i', $start),
        'end'      => date('G\:i', $end)
      );
    }
  }

  // Loop over days
  ksort($days);
  foreach ($days as $day => $fields) {
    $out .= "<p>" . ucfirst(strftime("%A %e", strtotime($day))) . ", ";
    $i = 0;
    foreach ($fields as $field) {
      $out .= $i ? " et de " : "de ";
      $out .= $field['start'] . " à " . $field['end'];
      $i++;
    }
    $out .= "</p>";
  }

  if (!count($days))
  {
    $out .= "<p>Fermé cette semaine.</p>";
  }

  setlocale(LC_TIME, $oldLocale);

  return $out;
}

function scdcalendar_thisweeklib($nid) {
  return build_week_calendar(node_load($nid));
}

function scdcalendar_thisyearlib($nid) {
  $node = node_load($nid);

  $oldLocale = setlocale(LC_TIME, '0');
  setlocale(LC_TIME, 'fr_FR.UTF8', 'fr.UTF8', 'fr_FR.UTF-8', 'fr.UTF-8');

  if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
   or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
    return false;

  $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
  $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

  $client = gauth_client_get($accountname, TRUE);

  $service = new Google_Service_Calendar($client);

  $timeMin = new DateTime();
  $timeMin->modify('-1 year');
  $timeMax = new DateTime();
  $timeMax->modify('+1 year');

  $events = $service->events->listEvents($calid, array(
    'singleEvents' => 'true',
    'timeMin' => $timeMin->format(DateTime::RFC3339),
    'timeMax' => $timeMax->format(DateTime::RFC3339),
  ));

  $days = array();

  foreach ($events->getItems() as $event) {
    $days[] = date('Y-m-d', strtotime($event->getStart()->dateTime));
  }

  $out = "<div class=\"containeri-fluid\">";
  $out .= "<div class=\"row\">";
  for ($i = 1; $i <= 12; $i++)
  {
    $out .= "<div class=\"scdcalcol col-md-4 col-sm-6 col-xs-12\">" . build_year_calendar($i, 2015, $days) . "</div>";
  }
  $out .= "</div>";
  $out .= "</div>";

  setlocale(LC_TIME, $oldLocale);

  return $out;
}

?>
