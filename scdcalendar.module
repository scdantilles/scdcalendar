<?php

function scdcalendar_help($path, $arg) {
  switch ($path) {
    case "admin/help#scdcalendar":
      return '<p>' . t("Help text") . '</p>';
      break;
  }
} 

function scdcalendar_menu() {

  $items[] = array(
    'path' => 'today',
    'title' => 'Aujourd\'hui',
    'page callback' => 'scdcalendar_today',
    'access callback' => TRUE,
  );

  $items[] = array(
    'path' => 'thisweek',
    'title' => 'Cette semaine',
    'page callback' => 'scdcalendar_thisweek',
    'access callback' => TRUE,
  );

  $items['node/%/thisweeklib'] = array(
    'title' => 'Cette semaine',
    'page callback' => 'scdcalendar_thisweeklib',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['node/%/thisyearlib'] = array(
    'title' => 'Cette année',
    'page callback' => 'scdcalendar_thisyearlib',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

function scdcalendar_today() {

  $dt = new DateTime();
  $now = $dt->getTimestamp();

  $out = "<h2>Horaires d'ouverture</h2>";

  $nodes = node_load_multiple(array(), array('type' => 'library'));

  // Loop over libraries
  foreach ($nodes as $node) {
    if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
     or !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
      continue;

    $out .= "<h3>" . $node->title . "</h3>";

    $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
    $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

    $client = gauth_client_get($accountname, TRUE);

    $service = new Google_Service_Calendar($client);

    $events = $service->events->listEvents($calid);

    // Loop over events
    foreach ($events->getItems() as $event) {
      $instances = $service->events->instances($calid, $event->id);
      foreach ($instances->getItems() as $instance) {
        $start = strtotime($instance->getStart()->dateTime);
        $end = strtotime($instance->getEnd()->dateTime);
        if (date('y-m-d', $start) == date('y-m-d', $now)) {
          $out .= "<p>De " . date('G\:i', $start) . " a " . date('G\:i', $end) . "</p>";
        }
      }
    }
    if (!count($events->getItems()))
    {
      $out .= "<p>Fermé aujourd'hui.</p>";
    }
  }

  //$out .= "<h2>Debug</h2>";
  //$out .= "<pre>" . print_r($nodes, TRUE) . "</pre>";

  return $out;
}

function scdcalendar_thisweek() {
  $out = "<h2>Horaires d'ouverture</h2>";

  $nodes = node_load_multiple(array(), array('type' => 'library'));

  // Loop over libraries
  foreach ($nodes as $node) {
    $out .= "<h3>" . $node->title . "</h3>";
    $out .= build_week_calendar($node);
  }

  return $out;
}

function build_year_calendar($month, $year, $days) {
  $daysOfWeek = array('D','L','M','M','J','V','S');
  $firstDayOfMonth = mktime(0, 0, 0, $month, 1, $year);
  $numberDays = date('t', $firstDayOfMonth);

  $dateComponents = getdate($firstDayOfMonth);
  $monthName = $dateComponents['month'];
  $dayOfWeek = $dateComponents['wday'];

  $calendar = "<table class=\"scdcalendar table\">";
  $calendar .= "<caption>$monthName</caption>";
  $calendar .= "<tr>";

  foreach($daysOfWeek as $day) {
    $calendar .= "<th class='header'>$day</th>";
  } 

  $currentDay = 1;

  $calendar .= "</tr><tr>";

  if ($dayOfWeek > 0) { 
    $calendar .= "<td colspan='$dayOfWeek'>&nbsp;</td>";
  }
  
  $month = str_pad($month, 2, "0", STR_PAD_LEFT);

  while ($currentDay <= $numberDays) {
    if ($dayOfWeek == 7) {
      $dayOfWeek = 0;
      $calendar .= "</tr><tr>";
    }
    
    $currentDayRel = str_pad($currentDay, 2, "0", STR_PAD_LEFT);
    $date = "$year-$month-$currentDayRel";
    $busy = "";
    if (in_array($date, $days))
      $busy = "busy";
    $calendar .= "<td class='day $busy' rel='$date'>$currentDay</td>";

    $currentDay++;
    $dayOfWeek++;
  }

  if ($dayOfWeek != 7) {
    $remainingDays = 7 - $dayOfWeek;
    $calendar .= "<td colspan='$remainingDays'>&nbsp;</td>";
  }
  
  $calendar .= "</tr>";
  $calendar .= "</table>";

  return $calendar;
}

function build_week_calendar($node) {
  $oldLocale = setlocale(LC_TIME, '0');
  setlocale(LC_TIME, 'fr_FR.UTF8', 'fr.UTF8', 'fr_FR.UTF-8', 'fr.UTF-8');

  $dt = new DateTime();
  $now = $dt->getTimestamp();

  $out = "";

  if (!array_key_exists(LANGUAGE_NONE, $node->field_google_account_name)
   || !array_key_exists(LANGUAGE_NONE, $node->field_calendar_id))
    continue;

  $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
  $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

  $client = gauth_client_get($accountname, TRUE);

  $service = new Google_Service_Calendar($client);

  $events = $service->events->listEvents($calid);

  // Loop over events
  $days = array();
  foreach ($events->getItems() as $event) {
    $instances = $service->events->instances($calid, $event->id);
    foreach ($instances->getItems() as $instance) {
      $start = strtotime($instance->getStart()->dateTime);
      $end = strtotime($instance->getEnd()->dateTime);
      if (date('W', $start) == date('W', $now)) {
        $days[$instance->getStart()->dateTime][] = array(
          'start' => date('G\:i', $start),
          'end'   => date('G\:i', $end)
        );
      }
    }
  }

  // Loop over days
  ksort($days);
  foreach ($days as $day => $fields) {
    $out .= "<p>" . ucfirst(strftime("%A %e", strtotime($day))) . ", ";
    $i = 0;
    foreach ($fields as $field) {
      $out .= $i ? " et de " : "de ";
      $out .= $field['start'] . " a " . $field['end'];
      $i++;
    }
    $out .= "</p>";
  }

  if (!count($days))
  {
    $out .= "<p>Fermé cette semaine.</p>";
  }

  setlocale(LC_TIME, $oldLocale);

  return $out;
}

function scdcalendar_thisweeklib($nid) {
  return build_week_calendar(node_load($nid));
}

function scdcalendar_thisyearlib($nid) {
  $node = node_load($nid);

  $accountname = $node->field_google_account_name[LANGUAGE_NONE][0]['value'];
  $calid = $node->field_calendar_id[LANGUAGE_NONE][0]['value'];

  $client = gauth_client_get($accountname, TRUE);

  $service = new Google_Service_Calendar($client);

  $events = $service->events->listEvents($calid);
  $days = array();

  foreach ($events->getItems() as $event) {
    $instances = $service->events->instances($calid, $event->id);
    foreach ($instances->getItems() as $instance) {
      $days[] = date('Y-m-d', strtotime($instance->getStart()->dateTime));
    }   
  }

  $out = "<div class=\"containeri-fluid\">";
  $out .= "<div class=\"row\">";
  for ($i = 1; $i <= 12; $i++)
  {
    $out .= "<div class=\"scdcalcol col-md-4 col-sm-6 col-xs-12\">" . build_year_calendar($i, 2015, $days) . "</div>";
  }
  $out .= "</div>";
  $out .= "</div>";
  return $out;
}

?>
